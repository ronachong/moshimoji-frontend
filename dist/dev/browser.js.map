{"version":3,"sources":["webpack:///./kit/lib/routing.js","webpack:///./kit/entry/browser.js","webpack:///./src/app.js","webpack:///./src/reducers/counter.js","webpack:///./src/components/main/index.js","webpack:///./src/components/graphql.js","webpack:///./src/components/routes.js","webpack:///./src/components/redux.js","webpack:///./src/components/stats.js","webpack:///./src/components/stats.scss","webpack:///./src/components/styles/index.js","webpack:///./src/components/styles/styles.css","webpack:///./src/components/styles/styles.scss","webpack:///./src/components/styles/styles.less","webpack:///./src/components/main/main.scss","webpack:///./src/components/main/reactql-logo.svg","webpack:///./src/styles.global.css","webpack:///./kit/lib/apollo.js","webpack:///./kit/lib/env.js","webpack:///./kit/lib/redux.js","webpack:///./src/graphql/queries/all_messages.gql","webpack:///./src/graphql/queries/message.gql","webpack:///./kit/config.js"],"names":["Status","props","code","children","staticContext","status","React","PureComponent","propTypes","PropTypes","number","isRequired","node","defaultProps","NotFound","Redirect","to","from","push","permanent","oneOfType","string","object","bool","client","browserClient","store","createNewStore","doRender","ReactDOM","hydrate","document","getElementById","Root","Chain","AppContainer","require","module","hot","accept","default","config","addReducer","count","enableGraphQLServer","cert","enableSSL","key","setGraphQLSchema","addGetRoute","ctx","stateDump","JSON","stringify","getState","body","set404Handler","setErrorHandler","e","console","log","message","getKoaApp","app","context","engine","on","error","addMiddleware","next","set","dispatch","type","reducer","state","action","merge","name","content","css","hello","logo","GraphQLMessage","graphql","data","text","isLoading","loading","shape","Home","Page","match","params","WhenNotFound","ReduxCounter","connect","counter","triggerIncrement","info","map","val","styleExamples","example","sass","less","createClient","opt","Object","assign","reduxRootSelector","apollo","apolloClientOptions","getNetworkInterface","uri","networkInterface","createNetworkInterface","opts","apolloNetworkOptions","use","apolloMiddleware","applyMiddleware","f","useAfter","apolloAfterware","applyAfterware","graphQLServer","getServerURL","graphQLEndpoint","host","port","allowSSL","stub","hasState","window","__STATE__","unwind","r","concat","reducers","arr","defaultReducer","initialState","keys","Immutable","apolloClient","createStore","combineReducers","compose","middleware","__REDUX_DEVTOOLS_EXTENSION__","Common","Map","Error","endpoint","graphiQL","middlewareFunc","afterwareFunc","Config","routes","Set","koaAppFunc","enableHTTP","enableForceSSL","sslOptions","graphQLSchema","enableBodyParser","bodyParserOptions","corsOptions","func","handler404","errorHandler","add","method","route","handlers","addRoute","schema"],"mappings":"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","file":"browser.js","sourcesContent":["/* eslint-disable no-param-reassign */\n\n// ----------------------\n// IMPORTS\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Route, Redirect as ReactRouterRedirect } from 'react-router-dom';\n\n// ----------------------\n\n// <Status code=\"xxx\"> component.  Updates the context router's context, which\n// can be used by the server handler to respond to the status on the server.\nclass Status extends React.PureComponent {\n  static propTypes = {\n    code: PropTypes.number.isRequired,\n    children: PropTypes.node,\n  }\n\n  static defaultProps = {\n    children: null,\n  }\n\n  render() {\n    const { code, children } = this.props;\n    return (\n      <Route render={({ staticContext }) => {\n        if (staticContext) {\n          staticContext.status = code;\n        }\n        return children;\n      }} />\n    );\n  }\n}\n\n// <NotFound> component.  If this renders on the server in development mode,\n// it will attempt to proxyify the request to the upstream `webpack-dev-server`.\n// In production, it will issue a hard 404 and render.  In the browser, it will\n// simply render.\nexport class NotFound extends React.PureComponent {\n  static propTypes = {\n    children: PropTypes.node,\n  }\n\n  static defaultProps = {\n    children: null,\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <Status code={404}>\n        {children}\n      </Status>\n    );\n  }\n}\n\n// <Redirect> component. Mirrors React Router's component by the same name,\n// except it sets a 301/302 status code for setting server-side HTTP headers.\nexport class Redirect extends React.PureComponent {\n  static propTypes = {\n    to: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.object,\n    ]).isRequired,\n    from: PropTypes.string,\n    push: PropTypes.bool,\n    permanent: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    from: null,\n    push: false,\n    permanent: false,\n  }\n\n  render() {\n    const { to, from, push, permanent } = this.props;\n    const code = permanent ? 301 : 302;\n    return (\n      <Status code={code}>\n        <ReactRouterRedirect to={to} from={from} push={push} />\n      </Status>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./kit/lib/routing.js","// Browser entry point, for Webpack.  We'll grab the browser-flavoured\n// versions of React mounting, routing etc to hook into the DOM\n\n// ----------------------\n// IMPORTS\n\n/* NPM */\n\n// Enable async/await and generators, cross-browser\nimport 'regenerator-runtime/runtime';\n\n// Patch global.`fetch` so that Apollo calls to GraphQL work\nimport 'isomorphic-fetch';\n\n// React parts\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Browser routing\nimport { BrowserRouter } from 'react-router-dom';\n\n// Apollo Provider. This HOC will 'wrap' our React component chain\n// and handle injecting data down to any listening component\nimport { ApolloProvider } from 'react-apollo';\n\n/* ReactQL */\n\n// Root component.  This is our 'entrypoint' into the app.  If you're using\n// the ReactQL starter kit for the first time, `src/app.js` is where\n// you can start editing to add your own code.  Note:  This first is imported\n// first, since it sets up our app's settings\nimport App from 'src/app';\n\n// Grab the shared Apollo Client\nimport { browserClient } from 'kit/lib/apollo';\n\n// Custom redux store creator.  This will allow us to create a store 'outside'\n// of Apollo, so we can apply our own reducers and make use of the Redux dev\n// tools in the browser\nimport createNewStore from 'kit/lib/redux';\n\n// ----------------------\n\n// Create a new browser Apollo client\nconst client = browserClient();\n\n// Create a new Redux store\nconst store = createNewStore(client);\n\n// Create the 'root' entry point into the app.  If we have React hot loading\n// (i.e. if we're in development), then we'll wrap the whole thing in an\n// <AppContainer>.  Otherwise, we'll jump straight to the browser router\nfunction doRender() {\n  ReactDOM.hydrate(\n    <Root />,\n    document.getElementById('main'),\n  );\n}\n\n// The <Root> component.  We'll run this as a self-contained function since\n// we're using a bunch of temporary vars that we can safely discard.\n//\n// If we have hot reloading enabled (i.e. if we're in development), then\n// we'll wrap the whole thing in <AppContainer> so that our views can respond\n// to code changes as needed\nconst Root = (() => {\n  // Wrap the component hierarchy in <BrowserRouter>, so that our children\n  // can respond to route changes\n  const Chain = () => (\n    <ApolloProvider store={store} client={client}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n\n  // React hot reloading -- only enabled in development.  This branch will\n  // be shook from production, so we can run a `require` statement here\n  // without fear that it'll inflate the bundle size\n  if (module.hot) {\n    // <AppContainer> will respond to our Hot Module Reload (HMR) changes\n    // back from WebPack, and handle re-rendering the chain as needed\n    const AppContainer = require('react-hot-loader').AppContainer;\n\n    // Start our 'listener' at the root component, so that any changes that\n    // occur in the hierarchy can be captured\n    module.hot.accept('src/app', () => {\n      // Refresh the entry point of our app, to get the changes.\n\n      // eslint-disable-next-line\n      require('src/app').default;\n\n      // Re-render the hierarchy\n      doRender();\n    });\n\n    return () => (\n      <AppContainer>\n        <Chain />\n      </AppContainer>\n    );\n  }\n  return Chain;\n})();\n\ndoRender();\n\n\n\n// WEBPACK FOOTER //\n// ./kit/entry/browser.js","// Your app's entry point.  Every ReactQL projects requires 'src/app.js',\n// which both the server and browser will import.\n//\n// In this file, you'll do two things:\n//\n// 1.  Import `kit/config`, and configure your app.  In this example, I'm\n// adding a custom Redux reducer that acts as a simple counter, and enabling\n// a built-in GraphQL server that imports a schema for a simple message.\n//\n// 2.  Export the root React component that goes between <div id=\"main\"/>\n// in the server-side HTML.\n\n// ----------------------\n// IMPORTS\n\n/* ReactQL */\n\n// Config API, for adding reducers and configuring our ReactQL app\nimport config from 'kit/config';\n\n/* App */\n\n// Example counter reducer.  This simply increments the counter by +1\nimport counterReducer from 'src/reducers/counter';\n\n// Main component -- i.e. the 'root' React component in our app\nimport Main from 'src/components/main';\n\n// Init global styles.  These will be added to the resulting CSS automatically\n// without any class hashing.  Use this to include default or framework CSS.\nimport './styles.global.css';\n\n// ----------------------\n\n/* REDUCERS */\n\n// Add our custom `counter` reducer, with the initial state as a zero count.\n// Note:  The initial state (3rd param) will automatically be wrapped in\n// `seamless-immutable` by the kit's Redux init code, so plain objects are\n// automatically immutable by default\nconfig.addReducer('counter', counterReducer, { count: 0 });\n\n/* GRAPHQL */\n\n// Enable the internal GraphQL server.  This will do two things:\n//\n// 1.  On the server, it will set-up the necessary route handlers to 'listen'\n// to incoming GraphQL requests on `/graphql`, as well as (by default) set-up\n// the GraphiQL IDE\n//\n// 2.  On the client, it will append the correct server URL so that we can\n// call the ReactQL host properly, and let the server handle our requests\nconfig.enableGraphQLServer();\n\n/* SERVER */\n\n// Set our server config, by checking `SERVER` -- this code path will be\n// eliminated by Webpack in the browser, so we can safely add this.\n\nif (SERVER) {\n  /* SSL */\n\n  // By default, the Koa web server runs on a plain HTTP server. However,\n  // you can easily enable HTTPS.  In the following commands, I grab a sample\n  // self-signed key/cert combo and call `config.enableSSL()` with the options\n  // I want to pass to the `https.createServer()` that happens under the hood.\n  //\n  // Note: Running https:// in your browser using this self-signed cert will\n  // undoubtably raise a security error. But at least we can see it's working.\n  //\n  // Production note: I generally recommend using a dedicated upstream proxy\n  // such as Nginx to handle HTTPS traffic, since the TLS handshake will likely\n  // be faster, and you can add HTTP/2 and have much finer-grain control over\n  // HTTP. But, if you need a fast SSL service, ReactQL has you covered!\n\n  /*\n    Uncomment the next two lines to enable SSL!\n  */\n\n  const cert = require('src/cert/self_signed');\n  config.enableSSL({ key: cert.key, cert: cert.cert });\n\n  // If wanted, you could also run an *SSL-only* server by uncommenting:\n  // config.disableHTTP();\n\n  // Or, you could automatically redirect non-HTTP traffic to SSL by\n  // uncommenting the following: (Note: pass { port: 8081 }) for development\n  // or { port: 4000 } for the default production port\n  // config.forceSSL({ port: 8081 });\n\n  /* GRAPHQL SCHEMA */\n  // Pass in the schema to use for our internal GraphQL server.  Note we're\n  // doing this inside a `SERVER` block to avoid importing a potentially large\n  // file, which would then inflate our client bundle unnecessarily\n  config.setGraphQLSchema(require('src/graphql/schema').default);\n\n  /* CUSTOM ROUTES */\n\n  // We can add custom routes to the web server easily, by using\n  // `config.add<Get|Post|Put|Patch>Route()`.  Note:  These are server routes only.\n  config.addGetRoute('/test', async ctx => {\n    // For demo purposes, let's get a JSON dump of the current Redux state\n    // to see that we can expect its contents\n    const stateDump = JSON.stringify(ctx.store.getState());\n\n    // Display a simple message, along with the Redux dump.  Note that this\n    // won't contain a full `apollo` response, because it hasn't passed through\n    // the React handler -- but it *does* mean we can still manipulate the state\n    // from within our root, or fire action handlers!\n    ctx.body = `Hello from your ReactQL route. Redux dump: ${stateDump}`;\n  });\n\n  /* CUSTOM 404 HANDLER */\n\n  // By default, if the server gets a route request that results in a 404,\n  // it will set `ctx.status = 404` but continue to render the <NotFound>\n  // block as normal.  If we want to add our own custom handler, we can use\n  // `config.set404Handler()` as below.\n  //\n  // Note:  This only applies to SERVER routes.  On the client, the\n  // <NotFound> block will *always* run.\n\n  config.set404Handler(ctx => {\n    // Like above, we'll grab a dump of the store state again -- this time,\n    // it *will* contain a full `apollo` dump because in order to figure out that\n    // a route has hit a 404, it will already have rendered the React chain\n    // and retrieved any relevant GraphQL\n    const stateDump = JSON.stringify(ctx.store.getState());\n\n    // Explicitly set the return status to 404.  This is done for us by\n    // default if we don't have a custom 404 handler, but left to the function\n    // otherwise (since we might not always want to return a 404)\n    ctx.status = 404;\n\n    // Set the body\n    ctx.body = `This route does not exist on the server - Redux dump: ${stateDump}`;\n  });\n\n  /* CUSTOM ERROR HANDLER */\n\n  // By default, any exceptions thrown anywhere in the middleware chain\n  // (including inside the `createReactHandler` func) will propogate up the\n  // call stack to a default error handler that simply logs the message and\n  // informs the user that there's an error.  We can override that default\n  // behaviour with a func with a (e, ctx, next) -> {} signature, where `e` is\n  // the error thrown, `ctx` is the Koa context object, and `next()` should\n  // be called if you want to recover from the error and continue processing\n  // subsequent middleware.  Great for logging to third-party tools, tc.\n  config.setErrorHandler((e, ctx /* `next` is unused in this example */) => {\n    // Mimic the default behaviour with an overriden message, so we know it's\n    // working\n    // eslint-disable-next-line no-console\n    console.log('Error: ', e.message);\n    ctx.body = 'Some kind of error. Check your source code.';\n  });\n\n  /* CUSTOM KOA APP INSTANTIATION */\n\n  // If you need to do something with `app` outside of middleware/routing,\n  // you can pass a func to `config.getKoaApp()` that will be fed the `app`\n  // instance directly.\n  config.getKoaApp(app => {\n    // First, we'll add a new `engine` key to the app.context`\n    // prototype (that per-request `ctx` extends) that can be\n    // used in the middleware below, to set a `Powered-By` header.\n    // eslint-disable-next-line no-param-reassign\n    app.context.engine = 'ReactQL';\n\n    // We'll also add a generic error handler, that prints out to the console.\n    // Note: This is a 'lower-level' than `config.setErrorHandler()` because\n    // it's not middleware -- it's for errors that happen at the server level\n    app.on('error', e => {\n      // This function should never show up, because `config.setErrorHandler()`\n      // is already catching errors -- but just an FYI for what you might do.\n      // eslint-disable-next-line no-console\n      console.error('Server error:', e);\n    });\n  });\n\n  /* CUSTOM MIDDLEWARE */\n\n  // We can set custom middleware to be processed on the server.  This gives us\n  // fine-grain control over headers, requests, responses etc, and even decide\n  // if we want to avoid the React handler until certain conditions\n  config.addMiddleware(async (ctx, next) => {\n    // Let's add a custom header so we can see middleware in action\n    ctx.set('Powered-By', ctx.engine); // <-- `ctx.engine` srt above!\n\n    // For the fun of it, let's demonstrate that we can fire Redux actions\n    // and it'll manipulate the state on the server side!  View the SSR version\n    // to see that the counter is now 1 and has been passed down the wire\n    ctx.store.dispatch({ type: 'INCREMENT_COUNTER' });\n\n    // Always return `next()`, otherwise the request won't 'pass' to the next\n    // middleware in the stack (likely, the React handler)\n    return next();\n  });\n}\n\n// In app.js, we need to export the root component we want to mount as the\n// starting point to our app.  We'll just export the `<Main>` component.\nexport default Main;\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js","// Sample reducer, showing how you can 'listen' to the `INCREMENT_COUNTER`\n// action, and update the counter state\n\n// Note: There's no need to specify default state, because the kit's Redux\n// init code wraps `undefined` state values in a `defaultReducer()` function,\n// that captures Redux sentinel vals and responds back with a black object --\n// so in our reducer functions, we can safely assume we're working with 'real'\n// immutable state\n\nexport default function reducer(state, action) {\n  if (action.type === 'INCREMENT_COUNTER') {\n    // Where did `state.merge()` come from?  Our plain state object is automatically\n    // wrapped in a call to `seamless-immutable` in our reducer init code,\n    // so we can use its functions to return a guaranteed immutable version\n    return state.merge({\n      count: state.count + 1,\n    });\n  }\n  return state;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/reducers/counter.js","// Main React component, that we'll import in `src/app.js`\n//\n// Note a few points from this file:\n//\n// 1.  We're using the format `main/index.js` for this file, which means we\n// can simply import 'src/components/main', which will auto-default to index.js.\n// This is a useful pattern when you have styles/images to pull from, and you\n// want to keep the component tree organised.\n//\n// 2.  We import SASS and a logo SVG file directly.  Classnames will be hashed\n// automatically, and images will be compressed/optimised in production.  File\n// names that are made available in the import variable will be identical on\n// both the server and browser.\n//\n// 3.  We're introducing React Router in this component.  In RR v4, routes are\n// not defined globally-- they're defined declaratively on components, so we\n// can respond to route changes anywhere.\n//\n// 4.  We're using `react-helmet`, which allows us to set <head> data like\n// a <title> or <meta> tags, which are filtered up to the main <Html> component\n// before HTML rendering.\n\n// ----------------------\n// IMPORTS\n\n/* NPM */\n\n// React\nimport React from 'react';\n\n// Routing via React Router\nimport {\n  Link,\n  Route,\n  Switch,\n} from 'react-router-dom';\n\n// <Helmet> component for setting the page title/meta tags\nimport Helmet from 'react-helmet';\n\n/* ReactQL */\n\n// NotFound 404 handler for unknown routes\nimport { Redirect } from 'kit/lib/routing';\n\n/* App */\n\n// Child React components. Note:  We can either export one main React component\n// per file, or in the case of <Home>, <Page> and <WhenFound>, we can group\n// multiple components per file where it makes sense to do so\nimport GraphQLMessage from 'src/components/graphql';\nimport { Home, Page, WhenNotFound } from 'src/components/routes';\nimport ReduxCounter from 'src/components/redux';\nimport Stats from 'src/components/stats';\nimport Styles from 'src/components/styles';\n\n// Styles\nimport css from './main.scss';\n\n// Get the ReactQL logo.  This is a local .svg file, which will be made\n// available as a string relative to [root]/dist/assets/img/\nimport logo from './reactql-logo.svg';\n\n// ----------------------\n\nexport default () => (\n  <div>\n    <Helmet\n      title=\"ReactQL application\"\n      meta={[{\n        name: 'description',\n        content: 'ReactQL starter kit app',\n      }]} />\n    <div className={css.hello}>\n      <img src={logo} alt=\"ReactQL\" className={css.logo} />\n    </div>\n    <hr />\n    <GraphQLMessage />\n    <hr />\n    <ul>\n      <li><Link to=\"/\">Home</Link></li>\n      <li><Link to=\"/page/about\">About</Link></li>\n      <li><Link to=\"/page/contact\">Contact</Link></li>\n      <li><Link to=\"/old/path\">Redirect from /old/path &#8594; /new/path</Link></li>\n    </ul>\n    <hr />\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/page/:name\" component={Page} />\n      <Redirect from=\"/old/path\" to=\"/new/path\" />\n      <Route component={WhenNotFound} />\n    </Switch>\n    <hr />\n    <ReduxCounter />\n    <hr />\n    <p>Runtime info:</p>\n    <Stats />\n    <hr />\n    <p>Stylesheet examples:</p>\n    <Styles />\n  </div>\n);\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/main/index.js","// Now, let's create a GraphQL-enabled component...\n\n// ... then, let's create the component and decorate it with the `graphql`\n// HOC that will automatically populate `this.props` with the query data\n// once the GraphQL API request has been completed\n\n// ----------------------\n// IMPORTS\n\n/* NPM */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// GraphQL\nimport { graphql } from 'react-apollo';\n\n/* App */\n\n// GraphQL queries.  Looking at this file demonstrates how to import fragments.\n// Webpack will compile this into inline GraphQL for us, so we can pass the\n// query to components using the @graphql decorator\nimport allMessages from 'src/graphql/queries/all_messages.gql';\n\n// ----------------------\n\n// Since this component needs to 'listen' to GraphQL data, we wrap it in\n// `react-apollo`'s `graphql` HOC/decorator and pass in the query that this\n// component requires.   Note: This is not to be confused with the `graphql`\n// lib, which is used on the server-side to initially define the schema\n@graphql(allMessages)\nexport default class GraphQLMessage extends React.PureComponent {\n  static propTypes = {\n    data: PropTypes.shape({\n      message: PropTypes.shape({\n        text: PropTypes.string,\n      }),\n    }),\n  }\n\n  static defaultProps = {\n    data: {\n      message: {\n        text: null,\n      },\n    },\n  }\n\n  render() {\n    const { data } = this.props;\n\n    // Since we're dealing with async GraphQL data, we defend against the\n    // data not yet being loaded by checking to see that we have the `message`\n    // key on our returned object\n    const message = data.message && data.message.text;\n\n    // Apollo will tell us whether we're still loading.  We can also use this\n    // check to ensure we have a fully returned response\n    const isLoading = data.loading ? 'yes' : 'nope';\n    return (\n      <div>\n        <h2>Message from GraphQL server: <em>{message}</em></h2>\n        <h2>Currently loading?: {isLoading}</h2>\n      </div>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/graphql.js","// Demonstrates several components on one page, each with their own `export`.\n//\n// These are smaller components that <Main> imports, and changes depending\n// on the page route (via React Router).\n//\n// <WhenNotFound> demonstrates the use of <NotFound>, a ReactQL helper\n// component that signals to our web server that we have a 404 error, to handle\n// accordingly\n\n// ----------------------\n// IMPORTS\n\n/* NPM */\n\n// React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/* ReactQL */\n\n// NotFound 404 handler for unknown routes\nimport { NotFound } from 'kit/lib/routing';\n\n// ----------------------\n\n// We'll display this <Home> component when we're on the / route\nexport const Home = () => (\n  <h1>You&apos;re on the home page - click another link above</h1>\n);\n\n// Helper component that will be conditionally shown when the route matches.\n// This gives you an idea how React Router v4 works -- we have a `match`\n// prop that gives us information on the route we can use within the component\nexport const Page = ({ match }) => (\n  <h1>Changed route: {match.params.name}</h1>\n);\n\n// Specify PropTypes if the `match` object, which is injected to props by\n// the <Route> component\nPage.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.object,\n  }).isRequired,\n};\n\n// Create a route that will be displayed when the code isn't found\nexport const WhenNotFound = () => (\n  <NotFound>\n    <h1>Unknown route - the 404 handler was triggered!</h1>\n  </NotFound>\n);\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/routes.js","// Component that demonstrates using a part of the Redux store\n// outside of Apollo.  We can use config.addReducer(key, reducer) in `src/app.js`\n// to add custom Redux reducers\n\n// ----------------------\n// IMPORTS\n\n/* NPM */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// HOC/decorator to listen to Redux store state\nimport { connect } from 'react-redux';\n\n// ----------------------\n\n// @connect accepts a function that takes the full Redux state, and then\n// returns the portion of state that our component cares about.  In this example,\n// we're listening to `state.counter`, which we can show inside the component\n@connect(state => ({ counter: state.counter }))\nexport default class ReduxCounter extends React.PureComponent {\n  static propTypes = {\n    counter: PropTypes.shape({\n      count: PropTypes.number.isRequired,\n    }),\n  };\n\n  static defaultProps = {\n    counter: {\n      count: 0,\n    },\n  }\n\n  // Trigger the `INCREMENT_COUNTER` action in Redux, to add 1 to the total.\n  // Note: by using the `= () {}` format, we're implicitly binding the component\n  // to `this`, which is why we can use @connect's `.dispatch()` function that's\n  // passed in as a prop\n  triggerIncrement = () => {\n    this.props.dispatch({\n      type: 'INCREMENT_COUNTER',\n    });\n  }\n\n  render() {\n    const { count } = this.props.counter;\n    return (\n      <div>\n        <h2>Listening to Redux counter: {count}</h2>\n        <button onClick={this.triggerIncrement}>Increment</button>\n      </div>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/redux.js","// Simple <Stats> component that displays our current environment.\n\n// ----------------------\n// IMPORTS\n\n/* NPM */\n\n// React\nimport React from 'react';\n\n/* App */\n\n// Styles\nimport css from './stats.scss';\n\n// ----------------------\n\nexport default () => {\n  // We can pull the environment from `process.env.NODE_ENV`, which is set\n  // to either 'development' | 'production' on both the server and in the browser\n  const info = [\n    ['Environment', process.env.NODE_ENV],\n  ];\n\n  return (\n    <ul className={css.data}>\n      {info.map(([key, val]) => (\n        <li key={key}>{key}: <span>{val}</span></li>\n      ))}\n    </ul>\n  );\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/stats.js","// removed by extract-text-webpack-plugin\nmodule.exports = {\"data\":\"data-1TlbpCj5FlrOdqUTJqH60F\"};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/stats.scss\n// module id = 504\n// module chunks = 0","// Example of CSS, SASS and LESS styles being used together\n\n// ----------------------\n// IMPORTS\n\n/* NPM */\nimport React from 'react';\n\n/* App */\n\n// Styles\nimport css from './styles.css';\nimport sass from './styles.scss';\nimport less from './styles.less';\n\n// ----------------------\n\nexport default () => (\n  <ul className={css.styleExamples}>\n    <li className={css.example}>Styled by CSS</li>\n    <li className={sass.example}>Styled by SASS</li>\n    <li className={less.example}>Styled by LESS</li>\n  </ul>\n);\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/styles/index.js","// removed by extract-text-webpack-plugin\nmodule.exports = {\"styleExamples\":\"styleExamples-1odAJW6hJJkT1H4az7KebJ\",\"example\":\"example-HDBhpRi1XOtosKy5rqCSL\"};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/styles/styles.css\n// module id = 506\n// module chunks = 0","// removed by extract-text-webpack-plugin\nmodule.exports = {\"example\":\"example-3x1WZ3q5Zomb6qbpAqayqQ\"};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/styles/styles.scss\n// module id = 507\n// module chunks = 0","// removed by extract-text-webpack-plugin\nmodule.exports = {\"example\":\"example-Qwu6EO0LZh1IVEfs-9zO_\"};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/styles/styles.less\n// module id = 508\n// module chunks = 0","// removed by extract-text-webpack-plugin\nmodule.exports = {\"hello\":\"hello-3yYdKbSCZaFVyGKKMfKulk\",\"logo\":\"logo-pd8BfVR8JEOTwAIiOe-h2\"};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/main/main.scss\n// module id = 509\n// module chunks = 0","module.exports = __webpack_public_path__ + \"assets/img/reactql-logo.7b90d212d7c2537aeffb13ed959c5491.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/main/reactql-logo.svg\n// module id = 510\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/styles.global.css\n// module id = 511\n// module chunks = 0","// ----------------------\n// IMPORTS\n\n/* NPM */\n\n// Apollo client library\nimport { createNetworkInterface, ApolloClient } from 'react-apollo';\n\n/* ReactQL */\n\n// Configuration\nimport config from 'kit/config';\n\n// Get environment, to figure out where we're running the GraphQL server\nimport { getServerURL } from 'kit/lib/env';\n\n// ----------------------\n\n// Helper function to create a new Apollo client, by merging in\n// passed options alongside any set by `config.setApolloOptions` and defaults\nexport function createClient(opt = {}) {\n  return new ApolloClient(Object.assign({\n    reduxRootSelector: state => state.apollo,\n  }, config.apolloClientOptions, opt));\n}\n\n// Wrap `createNetworkInterface` to attach middleware\nexport function getNetworkInterface(uri) {\n  const networkInterface = createNetworkInterface({\n    uri,\n    opts: config.apolloNetworkOptions,\n  });\n\n  // Attach middleware\n  networkInterface.use(config.apolloMiddleware.map(f => ({ applyMiddleware: f })));\n  networkInterface.useAfter(config.apolloAfterware.map(f => ({ applyAfterware: f })));\n\n  return networkInterface;\n}\n\n// Creates a new browser client\nexport function browserClient() {\n  // If we have an internal GraphQL server, we need to append it with a\n  // call to `getServerURL()` to add the correct host (in dev + production)\n  const uri = config.graphQLServer\n    ? `${getServerURL()}${config.graphQLEndpoint}` : config.graphQLEndpoint;\n\n  return createClient({\n    networkInterface: getNetworkInterface(uri),\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./kit/lib/apollo.js","/* eslint-disable import/prefer-default-export */\n\n// Environment-aware functions\n\n// Get the protocol://host:port of where the current server would bind\nexport function getServerURL(host = process.env.HOST, port = process.env.PORT, allowSSL = true) {\n  // Check for SSL\n  if (allowSSL && process.env.SSL_PORT) {\n    const stub = `https://${host || process.env.HOST}`;\n\n    // If we're on port 443, that's 'regular' SSL so no need to specify port\n    if (process.env.SSL_PORT === '443') return stub;\n    return `${stub}:${process.env.SSL_PORT}`;\n  }\n\n  // Plain HTTP\n  const stub = `http://${host || process.env.HOST}`;\n\n  // If we're on port 80, that's 'regular' HTTP so no need to specify port\n  if (port === '80') return stub;\n  return `${stub}:${port}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./kit/lib/env.js","/* eslint-disable no-underscore-dangle */\n\n/*\nCustom Redux store creation.  Along with the default Apollo store,\nwe can define custom reducers using `kit/config.addReducer()` which will\nbe available on the server and in the browser.\n\nStore state is wrapped by `seamless-immutable` to enforce a pattern of\nimmutability, to prevent weird side effects.\n*/\n\n// ----------------------\n// IMPORTS\n\n/* NPM */\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport Immutable from 'seamless-immutable';\n\n/* Local */\nimport config from 'kit/config';\n\n// ----------------------\n\n// Detect if we're both in the browser, AND we have dehydrated state\nconst hasState = !!(!SERVER && window.__STATE__);\n\n// Helper function that 'unwinds' the `config.reducers` Map, and provides\n// the `reducer` function or `initialState` (wrapped in `seamless-immutable`)\n// depending on what we asked for\nfunction unwind(reducer = true) {\n  // Unwind `config.reducers`.  If we're looking for the `reducer`, we'll\n  // wrap this in a `defaultReducer` function that properly handles the Redux\n  // 'undefined' sentinel value, or calls 'real' reducer if it's not undefined.\n  //\n  // If we're not looking for reducers, it'll pull out the `initialState`\n  // variable instead, which we'll further process below\n  const r = Object.assign({},\n    ...[].concat([...config.reducers].map(arr => ({\n      [arr[0]]: reducer ? function defaultReducer(state, action) {\n        // If `state` === undefined, this is Redux sending a sentinel value\n        // to check our set-up.  So we'll send back a plain object to prove\n        // that we're properly handling our reducer\n        if (typeof state === 'undefined') return {};\n\n        // Otherwise, call our real reducer with the {state, action}\n        return arr[1].reducer(state, action);\n      } : arr[1].initialState,\n    }))),\n  );\n\n  // If this is a reducer, return at this point\n  if (reducer) return r;\n\n  // If not, we're looking for the state -- so let's map it and wrap the\n  // object in `seamless-immutable`, to avoid side-effects with Redux\n  return Object.assign({}, ...Object.keys(r).map(key => ({\n    [key]: Immutable((hasState && (window.__STATE__[key])) || r[key]),\n  })));\n}\n\nexport default function createNewStore(apolloClient) {\n  const store = createStore(\n    // By default, we'll use just the apollo reducer.  We can easily add our\n    // own here, for global store management outside of Apollo\n    combineReducers({\n      apollo: apolloClient.reducer(),\n      ...unwind(),\n    }),\n    // Initial server state, provided by the server.\n    {\n      apollo: (hasState && window.__STATE__.apollo) || {},\n      ...unwind(false),\n    },\n    compose(\n      applyMiddleware(\n        apolloClient.middleware(),\n        thunkMiddleware,\n      ),\n      // Enable Redux Devtools on the browser, for easy state debugging\n      // eslint-disable-next-line no-underscore-dangle\n      (!SERVER && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined') ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n    ),\n  );\n\n  return store;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./kit/lib/redux.js","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":null,\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"},\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":74}};\n    doc.loc.source = {\"body\":\"#import \\\"./message.gql\\\"\\n\\nquery message {\\n  message {\\n    ...Message\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require(\"./message.gql\").definitions));\n\nmodule.exports = doc;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/graphql/queries/all_messages.gql\n// module id = 521\n// module chunks = 0","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":null,\"name\":{\"kind\":\"Name\",\"value\":\"text\"},\"arguments\":[],\"directives\":[],\"selectionSet\":null}]}}],\"loc\":{\"start\":0,\"end\":39}};\n    doc.loc.source = {\"body\":\"fragment Message on Message {\\n  text\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \nmodule.exports = doc;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/graphql/queries/message.gql\n// module id = 522\n// module chunks = 0","// Simple class to act as a singleton for app-wide configuration.\n\n// We'll start with a common config that can be extended separately by the\n// server/client, to provide environment-specific functionality\nclass Common {\n  constructor() {\n    // Store reducers in a `Map`, for easy key retrieval\n    this.reducers = new Map();\n\n    // Apollo (middle|after)ware\n    this.apolloMiddleware = [];\n    this.apolloAfterware = [];\n    this.apolloNetworkOptions = {};\n    this.apolloClientOptions = {};\n\n    // GraphQL endpoint.  This needs setting via either `config.enableGraphQLServer()`\n    // or `config.setGraphQLEndpoint()`\n    this.graphQLEndpoint = null;\n\n    // Set to true if we're using an internal GraphQL server\n    this.graphQLServer = false;\n  }\n\n  /* REDUX */\n\n  // Adds a new reducer.  Accepts a `key` string, a `reducer` function, and a\n  // (by default empty) `initialState` object, which will ultimately become immutable\n  addReducer(key, reducer, initialState = {}) {\n    if (typeof reducer !== 'function') {\n      throw new Error(`Can't add reducer for '${key}' - reducer must be a function`);\n    }\n    this.reducers.set(key, {\n      reducer,\n      initialState,\n    });\n  }\n\n  /* GRAPHQL */\n\n  // Enables internal GraphQL server.  Default GraphQL and GraphiQL endpoints\n  // can be overridden\n  enableGraphQLServer(endpoint = '/graphql', graphiQL = true) {\n    this.graphQLServer = true;\n    this.graphQLEndpoint = endpoint;\n    this.graphiQL = graphiQL;\n  }\n\n  // Set an external GraphQL URI for use with Apollo\n  setGraphQLEndpoint(uri, graphiQL = true) {\n    this.graphQLEndpoint = uri;\n    this.graphiQL = graphiQL;\n  }\n\n  // Register Apollo middleware function\n  addApolloMiddleware(middlewareFunc) {\n    this.apolloMiddleware.push(middlewareFunc);\n  }\n\n  // Register Apollo afterware function\n  addApolloAfterware(afterwareFunc) {\n    this.apolloAfterware.push(afterwareFunc);\n  }\n\n  // Apollo Client options.  These will be merged in with the `createClient`\n  // default options defined in `kit/lib/apollo.js`\n  setApolloClientOptions(opt = {}) {\n    this.apolloClientOptions = opt;\n  }\n\n  // Apollo Network options.  These will be merged in with the `createNetworkInterface`\n  // default options defined in `kit/lib/apollo.js`\n  setApolloNetworkOptions(opt = {}) {\n    this.apolloNetworkOptions = opt;\n  }\n}\n\n// Placeholder for the class we'll attach\nlet Config;\n\n// Server Config extensions.  This is wrapped in a `SERVER` block to avoid\n// adding unnecessary functionality to the client bundle.  Every byte counts!\nif (SERVER) {\n  Config = class ServerConfig extends Common {\n    constructor() {\n      super();\n      // Create a set for routes -- to retrieve based on insertion order\n      this.routes = new Set();\n\n      // Koa application function. But default, this is null\n      this.koaAppFunc = null;\n\n      // Flag for setting whether plain HTTP should be disabled\n      this.enableHTTP = true;\n\n      // Force SSL. Rewrites all non-SSL queries to SSL.  False, by default.\n      this.enableForceSSL = false;\n\n      // Options for enabling SSL. By default, this is null. If SSL is enabled\n      // in userland, this would instead hold an object of options\n      this.sslOptions = null;\n\n      // Custom middleware -- again, based on insertion order\n      this.middleware = new Set();\n\n      // GraphQL schema (if we're using an internal server)\n      this.graphQLSchema = null;\n\n      // Attach a GraphiQL IDE endpoint to our server?  By default - no.  If\n      // this === true, this will default to `/graphql`.  If it's a string, it'll\n      // default to the string value\n      this.graphiQL = false;\n\n      // Enable body parsing by default.  Leave `koa-bodyparser` opts as default\n      this.enableBodyParser = true;\n      this.bodyParserOptions = {};\n\n      // CORS options for `koa-cors`\n      this.corsOptions = {};\n    }\n\n    /* WEB SERVER / SSR */\n\n    // Get access to Koa's `app` instance, for adding custom instantiation\n    // or doing something that's not covered by other functions\n    getKoaApp(func) {\n      this.koaAppFunc = func;\n    }\n\n    // Enable SSL. Normally, you'd use an upstream proxy like Nginx to handle\n    // SSL. But if you want to run a 'bare' Koa HTTPS web server, you can pass\n    // in the certificate details here and it'll respond to SSL requests\n    enableSSL(opt) {\n      // At a minimum, we should have `key` and `cert` -- check for those\n      if (typeof opt !== 'object' || !opt.key || !opt.cert) {\n        throw new Error('Cannot enable SSL. Missing `key` and/or `cert`');\n      }\n      this.sslOptions = opt;\n    }\n\n    // Force SSL. Rewrites all non-SSL queries to SSL. Any options here are\n    // passed to `koa-sslify`, the SSL enforcement middleware\n    forceSSL(opt = {}) {\n      this.enableForceSSL = opt;\n    }\n\n    // Disable plain HTTP.  Note this should only be used if you've also set\n    // `enableSSL()` and you don't want dual-HTTP+SSL config\n    disableHTTP() {\n      this.enableHTTP = false;\n    }\n\n    // Disable the optional `koa-bodyparser`, to prevent POST data being sent to\n    // each request.  By default, body parsing is enabled.\n    disableBodyParser() {\n      this.enableBodyParser = false;\n    }\n\n    setBodyParserOptions(opt = {}) {\n      this.bodyParserOptions = opt;\n    }\n\n    // 404 handler for the server.  By default, `kit/entry/server.js` will\n    // simply return a 404 status code without modifying the HTML render.  By\n    // setting a handler here, this will be returned instead\n    set404Handler(func) {\n      if (typeof func !== 'function') {\n        throw new Error('404 handler must be a function');\n      }\n      this.handler404 = func;\n    }\n\n    // Error handler.  If this isn't defined, the server will simply return a\n    // 'There was an error. Please try again later.' message, and log the output\n    // to the console.  Override that behaviour by passing a (e, ctx, next) -> {} func\n    setErrorHandler(func) {\n      if (typeof func !== 'function') {\n        throw new Error('Error handler must be a function');\n      }\n      this.errorHandler = func;\n    }\n\n    // Add custom middleware.  This should be an async func, for use with Koa\n    addMiddleware(middlewareFunc) {\n      this.middleware.add(middlewareFunc);\n    }\n\n    // Adds a custom server route to attach to our Koa router\n    addRoute(method, route, ...handlers) {\n      this.routes.add({\n        method,\n        route,\n        handlers,\n      });\n    }\n\n    // Adds custom GET route\n    addGetRoute(route, ...handlers) {\n      this.addRoute('get', route, ...handlers);\n    }\n\n    // Adds custom POST route\n    addPostRoute(route, ...handlers) {\n      this.addRoute('post', route, ...handlers);\n    }\n\n    // Adds custom PUT route\n    addPutRoute(route, ...handlers) {\n      this.addRoute('put', route, ...handlers);\n    }\n\n    // Adds custom PATCH route\n    addPatchRoute(route, ...handlers) {\n      this.addRoute('patch', route, ...handlers);\n    }\n\n    // Adds custom DELETE route\n    addDeleteRoute(route, ...handlers) {\n      this.addRoute('delete', route, ...handlers);\n    }\n\n    // Set the GraphQL schema. This should only be called on the server, otherwise\n    // the bundle size passed by the `schema` object will be unnecessarily inflated\n    setGraphQLSchema(schema) {\n      this.graphQLSchema = schema;\n    }\n\n    // CORS options, for `koa-cors` instantiation\n    setCORSOptions(opt = {}) {\n      this.corsOptions = opt;\n    }\n  };\n} else {\n  // For the client config, we'll extend `Common` by default -- but if we need\n  // anything unique to the browser in the future, we'd add it here...\n  Config = class ClientConfig extends Common {};\n}\n\n// Since there's only one `Config` instance globally, we'll create the new\n// instance here and export it.  This will then provide any subsequent imports\n// with the same object, so we can add settings to a common config\nexport default new Config();\n\n\n\n// WEBPACK FOOTER //\n// ./kit/config.js"],"sourceRoot":""}